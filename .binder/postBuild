#!/bin/bash

# Ensure the script is executable
chmod +x "${0}"

# Set paths
export PATH="${HOME}/.local/bin:${PATH}"

# Skip system-level dependencies as they require root
# Instead, install user-level packages where possible
echo "Skipping system packages that require root permissions"

# Create local bin directory if it doesn't exist
mkdir -p ~/.local/bin

# Install Typst via the official installer (avoids snapd issues)
curl -fsSL https://typst.community/typst-install/install.sh | sh
# Add Typst to PATH (user-level only)
echo 'export PATH="$HOME/.typst/bin:$PATH"' >> ~/.bashrc

# Set environment variables
export PATH="${HOME}/.typst/bin:${PATH}"
export PUPPETEER_EXECUTABLE_PATH="/usr/bin/chromium"

# Check if Python requirements file exists
if [ -f "./requirements.txt" ]; then
    echo "Installing Python requirements"
    pip install --user --no-cache-dir -r ./requirements.txt
else
    echo "No requirements.txt found, skipping Python package installation"
fi

# Don't try to use uv or cargo as they might not be available
# and require root to install

# Stay in the current directory
# Relative paths should be used for node operations

# Install node packages if package.json exists
if [ -f "./package.json" ]; then
    echo "Installing npm packages"
    npm install --force --prefix .
else
    echo "No package.json found, skipping npm install"
fi

# Run build components if the file exists
if [ -f "./build-components.mjs" ]; then
    echo "Building components"
    node ./build-components.mjs
else
    echo "No build-components.mjs found, skipping component build"
fi

# Run jupyter lab build if jupyter is available
if command -v jupyter &> /dev/null; then
    echo "Building JupyterLab"
    jupyter lab build --dev-build=False
else
    echo "Jupyter not available, skipping lab build"
fi

echo "postBuild script completed"
