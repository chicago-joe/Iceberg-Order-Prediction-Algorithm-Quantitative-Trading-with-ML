{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c0cefe19-69bf-4a0d-bec1-26d9f70d1d62",
   "metadata": {},
   "source": [
    "##### \n",
    "## misc code used to cleanup and refactor optuna data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "bb331b93-a5b7-4741-acfd-a71efddab1b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from cysimdjson import JSONParser\n",
    "from glob import glob\n",
    "import pandas as pd\n",
    "from optuna.study import get_all_study_summaries, StudySummary\n",
    "from optuna import load_study\n",
    "from pathlib2 import Path\n",
    "import json, shutil\n",
    "from collections import defaultdict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "25e6b322-6868-4ad9-9da4-d3823f58c0a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "p=JSONParser()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "e21bf565-a75d-42c5-96c9-ff44478ac29e",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"./bulk_downloads/sbuser/SX3M/SXM-449/simple_metadata.json\", \"rb\") as f:\n",
    "    jsonparsed=p.parse(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "286adefa-b312-4956-9d8b-84219a4e46c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "hyoptdata=jsonparsed.export()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "a9d84e44-5987-43aa-a2b8-d46ff44fb03d",
   "metadata": {},
   "outputs": [],
   "source": [
    "estimator_params = defaultdict(dict)\n",
    "\n",
    "for flat_key, value in hyoptdata.items():\n",
    "    parts = flat_key.split('/')\n",
    "    \n",
    "    if (\n",
    "        len(parts) >= 5 and\n",
    "        parts[0] == \"model\" and\n",
    "        parts[2] == \"estimator\" and\n",
    "        parts[3] == \"params\"\n",
    "    ):\n",
    "        model_name = parts[1]\n",
    "        param_name = parts[4]\n",
    "        estimator_params[model_name][param_name] = value\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "916d09b4-68cb-4f06-990b-d0d24a447762",
   "metadata": {},
   "outputs": [],
   "source": [
    "for k in estimator_params.keys():\n",
    "    model_params = estimator_params[k]\n",
    "    output_path = f\"{k}_estimator_params.json\"\n",
    "    \n",
    "    Path(output_path).parent.mkdir(parents=True, exist_ok=True)\n",
    "    \n",
    "    with open(output_path, \"w\") as f:\n",
    "        json.dump(model_params, f, indent=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "5feac755-9472-4699-b070-792de0b115d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'base_score': 'None',\n",
       " 'booster': 'gbtree',\n",
       " 'callbacks': 'None',\n",
       " 'colsample_bylevel': 'None',\n",
       " 'colsample_bynode': 'None',\n",
       " 'colsample_bytree': 0.8,\n",
       " 'device': 'None',\n",
       " 'early_stopping_rounds': 'None',\n",
       " 'enable_categorical': True,\n",
       " 'eval_metric': 'error@0.7',\n",
       " 'feature_types': 'None',\n",
       " 'gamma': 0.2,\n",
       " 'grow_policy': 'None',\n",
       " 'importance_type': 'None',\n",
       " 'interaction_constraints': 'None',\n",
       " 'learning_rate': 0.05,\n",
       " 'max_bin': 'None',\n",
       " 'max_cat_threshold': 'None',\n",
       " 'max_cat_to_onehot': 'None',\n",
       " 'max_delta_step': 'None',\n",
       " 'max_depth': 4,\n",
       " 'max_leaves': 'None',\n",
       " 'min_child_weight': 10,\n",
       " 'monotone_constraints': 'None',\n",
       " 'multi_strategy': 'None',\n",
       " 'n_estimators': 500,\n",
       " 'n_jobs': -1,\n",
       " 'num_parallel_tree': 'None',\n",
       " 'objective': 'binary:logistic',\n",
       " 'random_state': 'None',\n",
       " 'reg_alpha': 0.2,\n",
       " 'reg_lambda': 2,\n",
       " 'sampling_method': 'None',\n",
       " 'scale_pos_weight': 'None',\n",
       " 'subsample': 0.8,\n",
       " 'tree_method': 'None',\n",
       " 'validate_parameters': 'None',\n",
       " 'verbose': 0,\n",
       " 'verbosity': 'None'}"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "8069a5fd-bcea-4879-920c-3a38e9e18263",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_visualizations = glob('./bulk_downloads/sbuser/SX3M/SXM-449/**/*.html', recursive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "4fd04490-2849-419d-bf34-09a4918fffe8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/visualizations/plot_contour.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/visualizations/plot_parallel_coordinate.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/visualizations/plot_edf.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/visualizations/plot_param_importances.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/visualizations/plot_optimization_history.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/visualizations/plot_slice.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/visualizations/plot_contour.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/visualizations/plot_parallel_coordinate.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/visualizations/plot_edf.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/visualizations/plot_param_importances.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/visualizations/plot_optimization_history.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/visualizations/plot_slice.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/visualizations/plot_contour.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/visualizations/plot_parallel_coordinate.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/visualizations/plot_edf.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/visualizations/plot_param_importances.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/visualizations/plot_optimization_history.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/visualizations/plot_slice.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/visualizations/plot_contour.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/visualizations/plot_parallel_coordinate.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/visualizations/plot_edf.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/visualizations/plot_param_importances.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/visualizations/plot_optimization_history.html',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/visualizations/plot_slice.html']"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "bd9955ab-9fc8-434a-b43c-94fe0635a2bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Copied plot_contour.html to data/LightGBM/visualizations\n",
      "✅ Copied plot_parallel_coordinate.html to data/LightGBM/visualizations\n",
      "✅ Copied plot_edf.html to data/LightGBM/visualizations\n",
      "✅ Copied plot_param_importances.html to data/LightGBM/visualizations\n",
      "✅ Copied plot_optimization_history.html to data/LightGBM/visualizations\n",
      "✅ Copied plot_slice.html to data/LightGBM/visualizations\n",
      "✅ Copied plot_contour.html to data/Random Forest/visualizations\n",
      "✅ Copied plot_parallel_coordinate.html to data/Random Forest/visualizations\n",
      "✅ Copied plot_edf.html to data/Random Forest/visualizations\n",
      "✅ Copied plot_param_importances.html to data/Random Forest/visualizations\n",
      "✅ Copied plot_optimization_history.html to data/Random Forest/visualizations\n",
      "✅ Copied plot_slice.html to data/Random Forest/visualizations\n",
      "✅ Copied plot_contour.html to data/XGBoost/visualizations\n",
      "✅ Copied plot_parallel_coordinate.html to data/XGBoost/visualizations\n",
      "✅ Copied plot_edf.html to data/XGBoost/visualizations\n",
      "✅ Copied plot_param_importances.html to data/XGBoost/visualizations\n",
      "✅ Copied plot_optimization_history.html to data/XGBoost/visualizations\n",
      "✅ Copied plot_slice.html to data/XGBoost/visualizations\n",
      "✅ Copied plot_contour.html to data/Logistic Regression/visualizations\n",
      "✅ Copied plot_parallel_coordinate.html to data/Logistic Regression/visualizations\n",
      "✅ Copied plot_edf.html to data/Logistic Regression/visualizations\n",
      "✅ Copied plot_param_importances.html to data/Logistic Regression/visualizations\n",
      "✅ Copied plot_optimization_history.html to data/Logistic Regression/visualizations\n",
      "✅ Copied plot_slice.html to data/Logistic Regression/visualizations\n"
     ]
    }
   ],
   "source": [
    "# now save images under data\n",
    "target_base = \"./data\"\n",
    "\n",
    "for path_str in plot_visualizations:\n",
    "    src = Path(path_str)  # ✅ THIS FIXES IT\n",
    "    parts = src.parts\n",
    "    try:\n",
    "        model_idx = parts.index(\"model\") + 1\n",
    "        model_name = parts[model_idx]\n",
    "        dest_dir = Path(\"/\".join([target_base, model_name, \"visualizations\"]))\n",
    "        dest_dir.mkdir(parents=True, exist_ok=True)\n",
    "        shutil.copy2(src, dest_dir / src.name)\n",
    "        print(f\"✅ Copied {src.name} to {dest_dir}\")\n",
    "    except Exception as e:\n",
    "        print(f\"❌ Failed to copy {src}: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7820f5a9-d45f-4d82-8be9-e3f20033e24c",
   "metadata": {},
   "outputs": [],
   "source": [
    "pkl_files = glob('./bulk_downloads/sbuser/SX3M/SXM-449/**/*.pkl', recursive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ec3fa209-e690-4b28-94de-a4db8cd6fb48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./bulk_downloads/sbuser/SX3M/SXM-449/model/LightGBM/tuning/study/study.pkl',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Random Forest/tuning/study/study.pkl',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/XGBoost/tuning/study/study.pkl',\n",
       " './bulk_downloads/sbuser/SX3M/SXM-449/model/Logistic Regression/tuning/study/study.pkl']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pkl_files"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21072c66-4e32-409a-b4b9-d4048eb01ee4",
   "metadata": {},
   "source": [
    "###\n",
    "## Convert to new optuna storage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "ac1edff2-2478-479c-b190-56c299d3db95",
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib\n",
    "import optuna\n",
    "from optuna.storages import RDBStorage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "0e6fa06b-16aa-4dd4-b645-3f74f1b06a0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-04-21 10:19:35,040] A new study created in RDB with name: LightGBM-449\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model study name: LightGBM-449\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-04-21 10:19:36,634] A new study created in RDB with name: Random Forest-449\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of trials migrated: 50\n",
      "model study name: Random Forest-449\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-04-21 10:19:37,513] A new study created in RDB with name: XGBoost-449\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of trials migrated: 50\n",
      "model study name: XGBoost-449\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-04-21 10:19:38,787] A new study created in RDB with name: Logistic Regression-449\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of trials migrated: 50\n",
      "model study name: Logistic Regression-449\n",
      "Number of trials migrated: 50\n"
     ]
    }
   ],
   "source": [
    "# 2. Create an RDB backend (here: SQLite)\n",
    "storage = RDBStorage(url=\"sqlite:///study.db\")\n",
    "\n",
    "for s in pkl_files:\n",
    "    study_name = s.partition('/model/')[2].split('/')[0]+\"-449\"\n",
    "    print(f\"model study name: {study_name}\")\n",
    "    legacy_study = joblib.load(s)\n",
    "    legacy_study.study_name = study_name\n",
    "    # 3. Initialize a new study record in the DB\n",
    "    study_id = storage.create_new_study(\n",
    "        study_name=legacy_study.study_name,  # keep the same name, if you like\n",
    "        directions=legacy_study.directions\n",
    "    )\n",
    "    # 4. Re‑insert existing trials from the pickle\n",
    "    for trial in legacy_study.get_trials(deepcopy=False):\n",
    "        storage.create_new_trial(study_id=study_id, template_trial=trial)\n",
    "\n",
    "    # 5. (Optional) Load it with Optuna API to verify\n",
    "    migrated = optuna.load_study(\n",
    "        study_name=legacy_study.study_name,\n",
    "        storage=storage\n",
    "    )\n",
    "    print(f\"Number of trials migrated: {len(migrated.trials)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "a1e29527-6051-4326-a9a0-988ca12ece80",
   "metadata": {},
   "outputs": [],
   "source": [
    "ss=get_all_study_summaries(storage,)\n",
    "from optuna import Study"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "b980d773-a8b9-41d3-8719-251879dc3984",
   "metadata": {},
   "outputs": [],
   "source": [
    "for study in storage.get_all_studies():\n",
    "    study_name = study.study_name\n",
    "    loaded_study = Study(study_name,storage)\n",
    "    dfStudy = loaded_study.trials_dataframe()\n",
    "    dfStudy.to_csv(f\"./data/{study_name.split('-')[0]}/trials.csv\",index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "af22db72-fed2-4115-ba84-9d795640c3f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "for summary in ss:\n",
    "    summary_dict = summary.best_trial.__dict__\n",
    "    with open(f\"./data/{summary.study_name.split('-')[0]}/best_trial.json\", \"w\") as f:\n",
    "        json.dump(summary_dict, f, indent=2, default=str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71942278-7f6a-4d5a-88de-6ad479a7bc7c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
